from numpy import matrix, sort, zeros, array, intersect1d, append, transpose
import numpy as np
from functools import reduce


def down_arrow(U: matrix, indexes):
    rows, pom = [], array([], dtype=int)
    indexes = sort(indexes)

    for col in indexes:
        for row in range(U.shape[0]):
            if U[row, col] == 1:
                pom = append(pom, row)
        rows.append(pom)
        pom = array([], dtype=int)

    if len(rows) == 0:
        return array([], dtype=int)

    if len(rows) == 1:
        return rows[0]

    return reduce(intersect1d, rows)


def up_arrow(U: matrix, indexes):
    cols, pom = [], array([], dtype=int)
    indexes = sort(indexes)

    for row in indexes:
        for col in range(U.shape[1]):
            if U[row, col] == 1:
                pom = append(pom, col)
        cols.append(pom)
        pom = array([], dtype=int)

    if len(cols) == 0:
        return array([], dtype=int)

    if len(cols) == 1:
        return cols[0]

    return reduce(intersect1d, cols)


def my_struct(cols=[], ups=[], downs=[], cover=0):
    return {'cols': cols, 'ups': ups, 'downs': downs, 'cover': cover}

def overlamp(U: matrix, ups, downs):
    overlamp = 0
    for i in downs:
        for y in ups:
            if U[i, y]:
                overlamp += 1

    return overlamp        
 
def GreConD(I: matrix):
    U = I.copy()
    (width, height) = I.shape
    A = matrix()
    B = matrix()
    #A = zeros((width, height)) # vetsi alokace height, muzou chybet sloupce
    #B = zeros((height, width)) # vetsi alokace height - zkusit append, muzou chybet radky
    best = my_struct()
    a = 0

    while U.any():
        # indexy neprazdnych sloupcu
        indexes = [i for i, column in enumerate(transpose(I)) if column.any()] #zbyvit se transponovani, zpomaluje to kod

        while not len(best['cols']) == width and indexes:
            new_best = my_struct()
            for i in indexes:
                downs = down_arrow(I, best['cols'] + [i])
                ups = up_arrow(I, downs)
                #overlamp = len(downs) * len(ups) #cover pocitat z U
                over = overlamp(U, ups, downs)
                if over > new_best['cover']:
                    new_best = my_struct(
                        best['cols'] + [i], ups, downs, over)

            if new_best['cover'] < best['cover']:
                break

            best = new_best
            [indexes.remove(id) for id, val in enumerate(
                best['ups']) if val and id in indexes]
        #print(best['downs'])
        #for row in best['downs']:
            # try:
            #     A[row, a] = 1
            # except IndexError:
            #     A = np.append(A, zeros((1, A.shape[1])), axis=0)
            #     A = np.append(A, zeros((A.shape[0], 1)), axis=1)
            #     A[row, a] = 1    
        new_row = zeros((1, n))
        for row in best['downs']:
            new_row[0, row] = 1

        B = np.append(B, new_row, axis=0) #exis=0 pro přidání řádku, exis=1 pro přidání sloupce

        new_col = zeros((m, 1))
        for col in best['ups']:
            new_col[col, 0] = 1
            
        A = np.append(A, new_col, axis=0) #exis=0 pro přidání řádku, exis=1 pro přidání sloupce

        #for col in best['ups']:
            # try:
            #     B[a, col] = 1            
            # except IndexError:
            #     B = np.append(B, zeros((1, B.shape[1])), axis=0)
            #     B = np.append(B, zeros((B.shape[0], 1)), axis=1)
            #     B[a, col] = 1
            

        for col in best['ups']: #zredukovat tento cyklus, opakuje se to
            for row in best['downs']:
                U[row, col] = 0

        #print(best['cover'], best['cols'], best['ups'], best['downs'])
        print(f"iterace {a} vypadá {U}")
        a += 1
        best = my_struct([], [], [], 0)

    print(A, B, I, U)    


matrix_test = matrix([[0, 0, 1, 1, 1, 1], [0, 1, 0, 1, 0, 1], [
                     1, 1, 0, 0, 1, 1], [1, 0, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0], [1, 1, 1, 0, 0, 0], [1, 1, 1, 0, 0, 0],[0, 0, 1, 1, 1, 1], [0, 1, 0, 1, 0, 1]])

M = matrix([[1,0,0,1,0,0,1,1,1,1,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,0,0,0],
[1,0,0,1,0,0,0,1,1,1,0,0,0,0,1,0,0,0,1,0,1,1,0,0,0,0,0,0],
[0,0,1,0,0,1,1,1,1,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0],
[1,0,0,1,0,0,1,1,1,1,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,0,0,0],
[1,0,0,1,0,0,1,1,1,1,0,0,0,0,1,0,0,0,1,0,1,1,0,0,0,0,0,0],
[1,0,0,1,0,0,0,1,1,1,0,0,0,0,1,0,0,0,1,0,1,1,0,0,0,0,0,0],
[1,0,0,1,0,0,0,1,1,1,0,0,0,0,1,0,0,0,1,1,1,1,0,0,0,0,0,0],
[0,0,1,0,0,1,0,1,1,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0],
[0,0,1,0,0,1,1,1,1,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0],
[1,0,0,1,0,0,0,1,1,1,0,0,0,0,1,0,0,0,0,1,0,1,0,0,0,0,0,0],
[1,0,0,1,0,0,1,1,1,1,0,0,0,0,1,0,0,0,1,0,1,1,0,0,0,0,0,0],
[0,1,1,0,1,0,0,0,1,1,0,0,0,1,0,0,0,0,1,1,0,0,1,0,0,0,0,0],
[0,0,1,0,0,1,1,1,1,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0],
[0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
[0,0,1,0,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1],
[0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1],
[0,1,1,0,1,0,1,0,1,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0],
[1,0,0,1,0,0,0,1,1,1,0,0,0,0,1,0,0,0,1,0,1,1,0,0,0,0,0,0],
[0,0,1,0,0,1,1,1,1,0,0,1,1,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0],
[0,0,0,1,0,1,1,1,1,1,0,1,1,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0],
[0,1,1,0,1,0,0,0,1,1,0,0,0,1,0,0,0,0,1,1,0,0,1,0,0,0,0,0],
[0,1,1,0,1,1,0,0,1,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0],
[1,0,0,1,0,0,0,1,1,1,0,0,0,0,1,0,0,0,1,0,1,1,0,0,0,0,0,0],
[0,1,1,0,1,0,0,0,1,1,0,0,0,1,0,0,0,0,1,0,1,0,1,0,0,0,0,0],
[0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0],
[0,0,1,0,0,1,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0],
[0,0,1,0,0,1,1,1,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0],
[1,0,0,1,1,0,0,1,1,1,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0],
[1,0,0,1,0,0,0,1,1,1,0,0,0,0,1,0,0,0,1,0,1,1,0,0,0,0,0,0],
[1,0,0,1,0,0,1,1,1,1,0,0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0],
[0,0,1,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0],
[1,0,0,1,0,0,0,1,1,1,0,0,0,0,1,0,0,0,1,1,1,1,0,0,0,0,0,0],
[1,0,0,1,0,0,0,1,1,1,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0],
[0,1,1,0,1,1,1,0,1,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0],
[0,0,1,0,0,1,0,1,1,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0],
[1,0,0,1,0,0,0,1,1,1,0,0,0,0,1,0,0,0,1,1,0,1,0,0,0,0,0,0],
[1,0,0,1,0,0,0,1,1,1,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0],
[0,1,1,0,1,0,1,0,1,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0],
[0,0,1,0,0,1,1,1,1,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0],
[1,0,1,0,1,0,0,0,0,1,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0],
[1,0,1,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0],
[0,1,1,0,0,0,1,0,1,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0],
[0,0,1,0,1,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0],
[0,1,1,0,1,0,0,0,1,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0],
[1,0,0,1,0,0,1,1,1,1,0,0,0,0,1,0,0,0,1,0,1,1,0,0,0,0,0,0],
[1,0,0,1,0,0,1,1,1,1,0,0,0,0,1,0,0,0,1,0,1,1,0,0,0,0,0,0],
[0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1],
[1,0,0,1,0,0,1,1,1,1,0,0,0,0,1,0,0,0,1,0,1,1,0,0,0,0,0,0],
[1,0,0,1,0,1,1,1,1,1,0,0,0,0,1,0,0,0,1,0,1,1,0,0,0,0,0,0],
[1,0,0,1,0,0,1,1,1,1,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0],
[1,0,0,1,0,0,1,1,1,1,0,0,0,0,1,0,0,0,1,0,1,1,0,0,0,0,0,0],
[1,0,1,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0],
[0,0,1,0,0,1,1,1,1,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0],
[0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1],
[1,0,0,1,0,0,1,1,1,1,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0],
[1,0,0,1,0,0,0,1,1,1,0,0,0,0,1,0,0,0,1,0,1,1,0,0,0,0,0,0],
[0,1,1,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,1,0,1,0,1,0,0,0,0,0],
[0,1,1,0,1,0,0,0,1,1,0,0,0,1,0,0,0,0,1,1,0,0,1,0,0,0,0,0],
[0,1,1,0,0,1,1,0,1,1,0,0,0,1,0,0,0,0,1,0,1,0,1,0,0,0,0,0],
[0,1,1,0,1,0,0,0,1,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0],
[0,0,1,0,0,1,1,1,1,0,0,1,1,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0],
[0,0,1,0,0,1,1,1,1,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0],
[0,0,1,0,0,0,1,1,1,1,1,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0],
[1,0,1,1,0,1,1,0,1,1,0,0,0,0,1,0,0,0,1,0,1,1,0,0,0,0,0,0],
[1,0,0,1,0,0,1,1,1,1,0,0,0,0,1,0,0,0,1,0,1,1,0,0,0,0,0,0],
[1,0,0,1,0,0,0,1,1,1,0,0,0,0,1,0,0,0,1,1,1,1,0,0,0,0,0,0],
[0,0,0,1,0,1,1,1,1,1,0,1,1,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0],
[1,0,0,1,0,0,1,1,1,1,0,0,0,0,1,0,0,0,1,0,1,1,0,0,0,0,0,0],
[1,0,0,1,0,0,1,1,1,1,0,0,0,0,1,0,0,0,1,1,1,1,0,0,0,0,0,0],
[1,0,0,1,0,0,1,1,1,1,0,0,0,0,1,0,0,0,1,0,1,1,0,0,0,0,0,0],
[1,0,0,1,0,0,0,1,1,1,0,0,0,0,1,0,0,0,1,1,1,1,0,0,0,0,0,0],
[0,1,1,0,0,0,1,0,1,1,0,0,0,1,0,0,0,0,1,0,1,0,1,0,0,0,0,0],
[0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1],
[0,0,1,0,0,1,0,1,1,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0],
[1,0,0,1,0,1,1,1,1,1,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0],
[1,0,0,1,0,1,1,1,1,1,0,1,0,1,0,0,0,0,1,0,1,1,0,0,0,0,0,0],
[0,0,0,0,0,1,1,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0],
[0,0,1,0,0,1,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
[0,1,1,0,1,1,1,0,1,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0],
[0,1,1,0,1,1,1,0,1,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0],
[0,0,1,0,0,0,1,1,1,1,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0],
[0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
[0,0,1,0,0,1,0,1,1,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0],
[0,1,1,0,1,0,0,0,1,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0],
[1,0,0,1,0,0,0,1,1,1,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0],
[0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1],
[0,0,1,0,0,1,1,1,1,0,1,1,1,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0],
[0,1,1,0,1,1,0,0,1,1,0,0,0,1,0,0,0,0,1,0,1,0,1,0,0,0,0,0],
[0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0],
[0,0,1,0,0,1,0,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0],
[0,0,1,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,1,0,1,0,0,1,0,0,0,0],
[0,0,1,0,0,0,1,1,1,1,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0],
[0,0,1,0,0,1,1,1,1,0,0,1,1,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0],
[1,0,0,1,1,0,0,1,1,1,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0],
[1,0,0,1,0,0,0,1,1,1,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0],
[0,1,1,0,1,0,1,0,1,1,0,0,0,1,0,0,0,0,1,0,1,0,1,0,0,0,0,0],
[1,0,0,1,0,0,0,1,1,1,0,0,0,1,0,0,0,0,1,0,1,1,0,0,0,0,0,0],
[1,0,1,0,1,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0],
[1,0,0,1,0,0,1,1,1,1,0,0,0,0,1,0,0,0,1,0,1,1,0,0,0,0,0,0],
[0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
[0,1,1,0,1,0,0,0,1,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0]]
)#zoo dataset

GreConD(matrix_test)
